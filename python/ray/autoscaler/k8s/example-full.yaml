# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 0

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 2

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    image: "" # e.g., tensorflow/tensorflow:1.5.0-py3
    container_name: "" # e.g. ray_docker


# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This value must be less than 1.0 for scaling to happen.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
    type: kubernetes    
    namespace: default
    deployments:
      head:
        apiVersion: apps/v1beta1 # for versions before 1.9.0 use apps/v1beta2
        kind: Deployment
        metadata:
          name: ray-deployment-head
        spec:
          replicas: 1 # tells deployment to run 2 pods matching the template
          template:
            metadata:
              labels:
                app: ray
                ray-head: "true"
            spec:
              terminationGracePeriodSeconds: 10
              containers:
              - name: ray-head
                image: docker-registry.infra.cloudera.com/ray-deploy
                command: ["/bin/bash"]
                args: ["-c", "ray start --head --redis-port=6379; while true; do sleep 10; done"]
                tty: true
                stdin: true
                ports:
                  - containerPort: 6379
      worker:
        apiVersion: apps/v1beta1 # for versions before 1.9.0 use apps/v1beta2
        kind: Deployment
        metadata:
          name: ray-worker-deployment 
        spec:
          replicas: 2 # tells deployment to run 2 pods matching the template
          template:
            metadata:
              labels:
                app: ray
                ray-worker: "true"
            spec:
              terminationGracePeriodSeconds: 10
              containers:
              - name: ray-worker
                image: docker-registry.infra.cloudera.com/ray-deploy
                command: ["/bin/bash"]
                args: ["-c", "ray start --redis-address=redis-service:$REDIS_SERVICE_SERVICE_PORT;while true; do sleep 10; done"]
                tty: true
                stdin: true
                ports:
                  - containerPort: 6379
    services:
      redis-service:
        apiVersion: v1
        kind: Service
        metadata:
          name: redis-service
        spec:
          selector:
            ray-head: "true"
          ports:
            - port: 6379

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below. This requires that you have added the key into the
# project wide meta-data.
#    ssh_private_key: /path/to/your/key.pem

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as subnets and ssh-keys.
head_node:

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
worker_nodes:

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# List of shell commands to run to set up nodes.
setup_commands: []

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands: []

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands: []
